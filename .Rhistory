data <- read.csv("C:/Users/MOEµNESS/Desktop/EnglandWeather_.csv")
View(data)
View(data)
summary(data)
str(data)
# data cleaning
missing_values<-sum(is.na(data))
missing_values
# Encodage des variables cibles ( SUMMARY, PRECIP) en utilisant Label Encoding
# la fonction factor() est utilisée pour convertir les variables SUMMARY et PRECIP.TYPE en facteurs,
# puis as.numeric() est utilisée pour convertir ces facteurs en valeurs numériques.
SUMMARY_enc<-as.numeric(as.factor(SUMMARY))
attach(data)
# Encodage des variables cibles ( SUMMARY, PRECIP) en utilisant Label Encoding
# la fonction factor() est utilisée pour convertir les variables SUMMARY et PRECIP.TYPE en facteurs,
# puis as.numeric() est utilisée pour convertir ces facteurs en valeurs numériques.
SUMMARY_enc<-as.numeric(as.factor(SUMMARY))
PRECIP.TYPE_enc<-as.numeric(as.factor(PRECIP.TYPE))
# On divise la dataset en "training and testing sets" en utilisant la methode "sample()"
set.seed(123)
train_index<-sample(1:nrow(data), 0.8 * nrow(data))
train_data<-data[train_index, ]
test_data<-data[-train_index, ]
# Construction des modeles de regression linéaire multiple en utilisant methode "lm()"
summary_model<-lm
# Construction des modeles de regression linéaire multiple en utilisant methode "lm()"
summary_model1<- lm(SUMMARY_enc ~ TEMPERATURE..C. + WIND.SPEED..km.h. + PRESSURE..millibars. + HUMIDITY, data = train_data)
View(data)
View(data)
View(train_data)
View(train_data)
precip_type_model<- lm(PRECIP.TYPE_enc ~ TEMPERATURE..C. + WIND.SPEED..km.h. + PRESSURE..millibars. + HUMIDITY, data = train_data)
# Encodage des variables cibles ( SUMMARY, PRECIP) en utilisant Label Encoding
# la fonction factor() est utilisée pour convertir les variables SUMMARY et PRECIP.TYPE en facteurs,
# puis as.numeric() est utilisée pour convertir ces facteurs en valeurs numériques.
SUMMARY<-as.numeric(as.factor(SUMMARY))
PRECIP.TYPE<-as.numeric(as.factor(PRECIP.TYPE))
# On divise la dataset en "training and testing sets" en utilisant la methode "sample()"
set.seed(123)
train_index<-sample(1:nrow(data), 0.8 * nrow(data))
train_data<-data[train_index, ]
test_data<-data[-train_index, ]
# Construction des modeles de regression linéaire multiple en utilisant methode "lm()"
summary_model1<- lm(SUMMARY ~ TEMPERATURE..C. + WIND.SPEED..km.h. + PRESSURE..millibars. + HUMIDITY, data = train_data)
# Encodage des variables cibles ( SUMMARY, PRECIP) en utilisant Label Encoding
# la fonction factor() est utilisée pour convertir les variables SUMMARY et PRECIP.TYPE en facteurs,
# puis as.numeric() est utilisée pour convertir ces facteurs en valeurs numériques.
SUMMARY_enc<-as.numeric(as.factor(SUMMARY))
PRECIP.TYPE_enc<-as.numeric(as.factor(PRECIP.TYPE))
# On divise la dataset en "training and testing sets" en utilisant la methode "sample()"
set.seed(123)
train_index<-sample(1:nrow(data), 0.8 * nrow(data))
train_data<-data[train_index, ]
test_data<-data[-train_index, ]
# Construction des modeles de regression linéaire multiple en utilisant methode "lm()"
summary_model1<- lm(SUMMARY_enc ~ TEMPERATURE..C. + WIND.SPEED..km.h. + PRESSURE..millibars. + HUMIDITY, data = train_data)
str(train_data)
str(data)
data
# Encodage des variables cibles ( SUMMARY, PRECIP) en utilisant one-hot encoding
install.packages("caret")
library(caret)
data_one_hot <- dummyVars(formula = ~ SUMMARY + PRECIP.TYPE, data = data)
data_encoded <- predict(data_one_hot, newdata = data)
# On divise la dataset en "training and testing sets" en utilisant la methode "sample()"
set.seed(123)
train_index <- createDataPartition(data_encoded$SUMMARY_enc, p = 0.8, list = FALSE)
train_index <- createDataPartition(data_encoded$SUMMARY_Partly_Cloudy, p = 0.8, list = FALSE)
# Encodage des variables cibles ( SUMMARY, PRECIP) en utilisant one-hot encoding
install.packages("dplyr")
install.packages("dplyr")
library(dplyr)
SUMMARY <- as.factor(SUMMARY)
PRECIP.TYPE <- as.factor(PRECIP.TYPE)
SUMMARY_enc <- as.numeric(SUMMARY)
PRECIP.TYPE_enc <- as.numeric(PRECIP.TYPE)
# On divise la dataset en "training and testing sets" en utilisant la methode "sample()"
set.seed(123)
train_index <- sample(1:nrow(data), 0.8 * nrow(data))
train_data <- data[train_index, ]
test_data <- data[-train_index, ]
# Construction des modeles de regression linéaire multiple en utilisant methode "lm()"
summary_model3 <- lm(SUMMARY_enc ~ TEMPERATURE..C. + WIND.SPEED..km.h. + PRESSURE..millibars. + HUMIDITY, data = train_data)
View(data)
View(data)
str(data)
summary(data)
#model de la regression lineaire multiple
model <- lm(TEMPERATURE..C. ~ WIND.SPEED..km.h. + PRESSURE..millibars. + HUMIDITY, data=data)
summary(model)
# Affichage des points et de la droite de régression pour WIND.SPEED..km.h.
install.packages("ggplot2")
library(ggplot2)
ggplot(data, aes(x=WIND.SPEED..km.h., y=TEMPERATURE..C.)) +
geom_point() +
geom_smooth(method='lm', formula=y~x, color='blue') +
xlab("Vitesse du vent (km/h)") +
ylab("Température (°C)") +
ggtitle("Régression linéaire multiple : Température en fonction de la vitesse du vent")
library(caTools)
install.packages("caTools") # Si vous n'avez pas déjà caTools installé
library(caTools)
# Diviser les données en ensembles d'entraînement (70%) et de test (30%)
set.seed(123) # Pour rendre les résultats reproductibles
split <- sample.split(TEMPERATURE..C., SplitRatio = 0.8)
split <- sample.split(data$TEMPERATURE..C., SplitRatio = 0.8)
train_data <- subset(data, split == TRUE)
test_data <- subset(data, split == FALSE)
#model de la regression lineaire multiple
model1 <- lm(TEMPERATURE..C. ~ WIND.SPEED..km.h. + PRESSURE..millibars. + HUMIDITY, data=train_data)
summary(model1)
# Faire des prédictions sur l'ensemble de test
predictions <- predict(model1, newdata=test_data)
# Calculer l'erreur de prédiction (RMSE par exemple)
rmse <- sqrt(mean((predictions - test_data$TEMPERATURE..C.)^2))
print(paste("RMSE:", rmse))
# Affichage des points et des prédictions sur l'ensemble de test pour WIND.SPEED..km.h.
ggplot(test_data, aes(x=WIND.SPEED..km.h., y=TEMPERATURE..C.)) +
geom_point() +
geom_line(aes(y=predictions), color='blue', size=1) +
xlab("Vitesse du vent (km/h)") +
ylab("Température (°C)") +
ggtitle("Régression linéaire multiple : Température en fonction de la vitesse du vent")
# Équation linéaire
equation <- as.character(round(coef(model)[1], 2))
for (i in 2:length(coef(model))) {
equation <- paste(equation, ifelse(coef(model)[i] >= 0, "+", "-"), abs(round(coef(model)[i], 2)), names(coef(model))[i])
}
for (i in 2:length(coef(model1))) {
equation <- paste(equation, ifelse(coef(model)[i] >= 0, "+", "-"), abs(round(coef(model)[i], 2)), names(coef(model))[i])
}
# Affichage des points, des prédictions et de l'équation linéaire sur l'ensemble de test pour WIND.SPEED..km.h.
ggplot(test_data, aes(x=WIND.SPEED..km.h., y=TEMPERATURE..C.)) +
geom_point() +
geom_line(aes(y=predictions), color='blue', size=1) +
geom_text(x=20, y=30, label=paste("Équation linéaire : ", equation), hjust=0, parse=TRUE) +
xlab("Vitesse du vent (km/h)") +
ylab("Température (°C)") +
ggtitle("Régression linéaire multiple : Température en fonction de la vitesse du vent")
# Affichage des points, des prédictions et de l'équation linéaire sur l'ensemble de test pour WIND.SPEED..km.h.
ggplot(test_data, aes(x=WIND.SPEED..km.h., y=TEMPERATURE..C.)) +
geom_point() +
geom_line(aes(y=predictions), color='blue', size=1) +
geom_text(x=20, y=30, label=paste("Équation linéaire : ", equation), hjust=0, parse=TRUE) +
xlab("Vitesse du vent (km/h)") +
ylab("Température (°C)") +
ggtitle("Régression linéaire multiple : Température en fonction de la vitesse du vent")
rlang::last_trace()
# Équation linéaire
equation <- as.expression(bquote(italic("Température (°C)") == .(round(coef(model)[1], 2)) ~ "+" ~ .(round(coef(model)[2], 2)) ~ "*" ~ italic("Vitesse du vent (km/h)") ~ "+" ~ .(round(coef(model)[3], 2)) ~ "*" ~ italic("Pression (millibars)") ~ "+" ~ .(round(coef(model)[4], 2)) ~ "*" ~ italic("Humidité")))
# Affichage des points, des prédictions et de l'équation linéaire sur l'ensemble de test pour WIND.SPEED..km.h.
ggplot(test_data, aes(x=WIND.SPEED..km.h., y=TEMPERATURE..C.)) +
geom_point() +
geom_line(aes(y=predictions), color='blue', size=1) +
annotate("text", x=20, y=30, label=equation, parse=TRUE, size=4) +
xlab("Vitesse du vent (km/h)") +
ylab("Température (°C)") +
ggtitle("Régression linéaire multiple : Température en fonction de la vitesse du vent, de la pression et de l'humidité")
# Prendre un échantillon aléatoire de 10 valeurs à partir de l'ensemble de test
sample_indices <- sample(1:nrow(test_data), 10)
sample_data2 <- test_data[sample_indices, ]
# Faire des prédictions sur l'échantillon de test
sample_predictions <- predict(model1, newdata=sample_data2)
# Créer un tableau avec les données de l'échantillon et les prédictions
sample_results <- cbind(sample_data2, Predicted_Temperature=sample_predictions)
# Afficher l'échantillon avec les prédictions
print(sample_results)
# data cleaning
missing_values<-sum(is.na(data))
missing_values
